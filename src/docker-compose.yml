services:
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    hostname: rabbitmq
    ports:
      - "5672:5672"    
      - "15672:15672"
      - "15692:15692"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - backend
    command: >
      bash -c "rabbitmq-plugins enable --offline rabbitmq_prometheus; rabbitmq-server"

  order-api:
    container_name: order-api
    build:
      context: .
      dockerfile: OrderOrchestrator.Api\Dockerfile
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RabbitMq__HostName=rabbitmq
      - RabbitMq__Durable=false
      - RabbitMq__Exclusive=false
      - RabbitMq__AutoDelete=false
    networks:
      - backend
    depends_on:
      - rabbitmq
  
  mongo:
    container_name: mongodb
    image: mongo
    ports:
      - "27017:27017"
    volumes:
      - ../mongo-init/init-stock.js:/docker-entrypoint-initdb.d/init-stock.js:ro
    networks:
      - backend

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
        - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
        - "9090:9090"
    networks:
        - backend

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - backend
    volumes:
      - grafana-storage:/var/lib/grafana
      - ../grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ../grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.monitoring.collection.enabled=true
      - bootstrap.memory_lock=true
      - "ELASTIC_PASSWORD="
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - backend

  logstash:
    image: docker.elastic.co/logstash/logstash:9.0.2
    container_name: logstash
    environment:
      - "LS_JAVA_OPTS=-Xms256m -Xmx256m"
    volumes:
      - ../elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"
      - "5000:5000"
      - "9600:9600"
    depends_on:
      - elasticsearch
    networks:
      - backend

  kibana:
    image: docker.elastic.co/kibana/kibana:9.0.2
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - backend

networks:
    backend:
volumes:
  grafana-storage:
  esdata:
 
